{"version":3,"file":"bundle.js","mappings":"mBAiBA,IAAMA,EAAqBC,SAASC,cAAc,iBAC5BD,SAASC,cAAc,kBAG/BC,iBAAiB,SAAS,WACtC,IC0BMC,ECxC6BC,EAA0BC,EFcvDC,EAAeP,EAAmBQ,OC0BlCJ,EAAeH,SAASC,cAAc,kBAC/BO,YAAc,GAC3BL,EAAaM,UAAUC,IAAI,UC1CQN,EFoBjC,SAACO,IChBE,SAAuBA,GAC5B,IAAMC,EAAmBZ,SAASC,cAAc,YAChDW,EAAiBC,UAAY,GAE7BF,EAAKG,SAAQ,SAACC,GACZ,IAAMC,EAAOhB,SAASiB,cAAc,OACpCD,EAAKE,UAAY,cAGjBF,EAAKH,UAAY,8BACDE,EAAKI,QAAO,kBAAUJ,EAAKK,KAAI,2BACrCL,EAAKK,KAAI,qDACcL,EAAKM,MAAK,uDACPN,EAAKO,SAAQ,gBAQjDV,EAAiBW,YAAYP,EAE/B,GACF,CDPMQ,CAAcb,EAChB,EEtB2DN,EFuB3D,SAACF,ICSE,SAAmBsB,GACxB,IAAMtB,EAAeH,SAASC,cAAc,iBAC5CE,EAAaK,YAAciB,EAC3BtB,EAAaM,UAAUiB,OAAO,SAChC,CDZMC,CAAUxB,EACZ,EEvBAyB,MAAO,mEFiBPtB,IEhBCuB,MAAK,SAACC,GACL,GAAKA,EAASC,GAMd,OAAOD,EAASE,OAJL3B,EAAc,uCAM3B,IACCwB,MAAK,SAAClB,GACHA,GACFP,EAASO,EAGX,IACCsB,OAAM,WAGD5B,EAAc,sCAEpB,GFGJ,G","sources":["webpack://final-practical/./src/main.ts","webpack://final-practical/./src/ui.ts","webpack://final-practical/./src/api.ts"],"sourcesContent":["interface Creature {\r\n  // provide types for picture, name, breed,\r\n  // and location (all strings)\r\n  picture: string;\r\n  name: string;\r\n  breed: string;\r\n  location: string;\r\n\r\n  }\r\n\r\n// Import functions from api.js and ui.js\r\n\r\n   // ADD TWO LINES OF CODE HERE TO IMPORT THE getData FUNCTION from api.js\r\n   import { getData} from \"./api\";\r\n   // AND THE THREE FUNCTIONS IN ui.js\r\n   import {renderResults, showError,clearError } from \"./ui\";\r\n// Get references to the dropdown and button\r\nconst creatureTypeSelect = document.querySelector(\"#creatureType\") as HTMLSelectElement;\r\nconst getDataButton = document.querySelector(\"#getDataButton\") as HTMLButtonElement;\r\n\r\n// Set up event listener for the \"Get Data\" button\r\ngetDataButton.addEventListener(\"click\", () => {\r\n  const selectedType = creatureTypeSelect.value; // Get the selected type\r\n  clearError(); // Clear any existing error messages\r\n\r\n  // Fetch data for the selected type\r\n  getData(\r\n    selectedType,\r\n    (data: Creature[]) => {  \r\n      renderResults(data); // Render the results on success\r\n    },\r\n    (errorMessage: string) => {\r\n      showError(errorMessage); // Show an error message on failure\r\n    }\r\n  );\r\n});\r\n","interface Creature {\r\n  // provide types for picture, name, breed,\r\n  // and location (all strings)\r\n  picture: string;\r\n  name: string;\r\n  breed: string;\r\n  location: string;\r\n\r\n  }\r\n\r\n// Updates the DOM to display the fetched data\r\n// - data: An array of objects containing creature details\r\nexport function renderResults(data: Creature[]): void {\r\n  const resultsContainer = document.querySelector(\"#results\") as HTMLElement;\r\n  resultsContainer.innerHTML = \"\"; // Clear existing results\r\n\r\n  data.forEach((item) => {\r\n    const card = document.createElement(\"div\");\r\n    card.className = \"result-card\";\r\n\r\n    // Add content to the card\r\n    card.innerHTML = `\r\n        <img src=\"${item.picture}\" alt=\"${item.name}\">\r\n        <h2>${item.name}</h2>\r\n        <p><strong>Breed:</strong> ${item.breed}</p>\r\n        <p><strong>Location:</strong> ${item.location}</p>\r\n      `;\r\n\r\n    // ADD THE LINE OF CODE HERE THAT WILL ADD THE CARD \r\n    // TO END OF THE RESULTS CONTAINER\r\n\r\n    //resultsContainer.innerHTML = `${resultsContainer.innerHTML} ${card} butt` ;// this probably dont work\r\n\r\n    resultsContainer.appendChild(card);\r\n\r\n  });\r\n}\r\n\r\n// Displays an error message on the page\r\n// - message: The error message to show\r\nexport function showError(message: string): void {\r\n  const errorMessage = document.querySelector(\"#errorMessage\") as HTMLElement; // no wonder it wasnt working, i forgot all about these. as BlahBlahBlah\r\n  errorMessage.textContent = message;\r\n  errorMessage.classList.remove(\"hidden\"); // Make the error visible  //hmmm\r\n}\r\n\r\n// Clears any visible error message from the page\r\nexport function clearError() {\r\n  const errorMessage = document.querySelector(\"#errorMessage\") as HTMLElement;\r\n  errorMessage.textContent = \"\";\r\n  errorMessage.classList.add(\"hidden\"); // Hide the error\r\n}\r\n","type SuccessCallback = (param: object[]) => void; // Callback for successful data retrieval\r\ntype ErrorCallback = (param: string) => void; // Callback for error handling\r\n\r\n\r\n// Fetches data from the Adoptable Creatures API\r\n// - type: The type of creature to fetch (e.g., \"cats\", \"dogs\", \"dragons\")\r\n// - callback: Function to run with the fetched data if successful\r\n// - errorCallback: Function to run with an error message if the request fails\r\nexport function getData(type: string,callback: SuccessCallback,errorCallback: ErrorCallback): void {\r\n    //const API_URL = \"https://people.rit.edu/anwigm/330/practical/api.php\";\r\n    fetch (`https://people.rit.edu/anwigm/330/practical/api.php?type=${type}`)\r\n    .then((response) => {\r\n      if (!response.ok){\r\n                 // Handle HTTP errors\r\n                 errorCallback(\"Error fetching data from the server.\");\r\n        return;\r\n      } \r\n\r\n      return response.json()\r\n\r\n    })\r\n    .then((data: object[]) => {  // thank you so much travis. i was able to look at some stuff and i instantly jogged my brain with data: something something\r\n     if(data){\r\n      callback(data);\r\n     }\r\n\r\n    })\r\n    .catch(() => {\r\n    \r\n          // Handle JSON parsing errors\r\n          errorCallback(\"Error parsing data from the server.\");\r\n    \r\n    });\r\n\r\n    \r\n    /*\r\n    //const xhr = new XMLHttpRequest();\r\n  \r\n    // Open a GET request to the API\r\n    //xhr.open(\"GET\", `${API_URL}?type=${type}`, true);\r\n    // Handle the API response\r\n    //xhr.onload = function () {\r\n      if (xhr.status >= 200 && xhr.status < 300) {\r\n        try {\r\n          // Parse the response and call the success callback\r\n          //const data = JSON.parse(xhr.responseText);\r\n\r\n          callback(data);\r\n        } catch (err) {\r\n          // Handle JSON parsing errors\r\n          errorCallback(\"Error parsing data from the server.\");\r\n        }\r\n      } else {\r\n        // Handle HTTP errors\r\n        errorCallback(\"Error fetching data from the server.\");\r\n      }\r\n    });/**/\r\n\r\n\r\n   \r\n\r\n  \r\n\r\n/////////////////\r\n\r\n    // Handle network errors\r\n   // .then (onerror) = function () {\r\n    //  errorCallback(\"Network error occurred while fetching data.\");\r\n   // };\r\n  \r\n    // Send the request\r\n   // \r\n\r\n   /*if(!response.ok){\r\n    errorCallback(\"Network error occurred while fetching data.\");\r\n\r\n    xhr.send();\r\n\r\n   }*/\r\n\r\n\r\n    // im sorry i just couldnt figure out how to include the \r\n    //    errorCallback(\"Network error occurred while fetching data.\"); and \r\n//          xhr.send();\r\n    \r\n    \r\n\r\n  };\r\n  \r\n\r\n\r\n  "],"names":["creatureTypeSelect","document","querySelector","addEventListener","errorMessage","callback","errorCallback","selectedType","value","textContent","classList","add","data","resultsContainer","innerHTML","forEach","item","card","createElement","className","picture","name","breed","location","appendChild","renderResults","message","remove","showError","fetch","then","response","ok","json","catch"],"sourceRoot":""}